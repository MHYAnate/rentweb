// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }

// app/layout.js

// import "./globals.css";
// import Layout from '../components/Layout/Layout';
// import { QueryClientProvider } from '@tanstack/react-query';
// import { queryClient } from '../lib/queryClient';
// import { AuthProvider } from '../contexts/AuthContext';

// export const metadata = {
//   title: 'Your App',
//   description: 'Your app description',
// };

// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <html lang="en">
//       <body>
//         <QueryClientProvider client={queryClient}>
//           <AuthProvider>
//             <Layout>
//               {children}
//             </Layout>
//           </AuthProvider>
//         </QueryClientProvider>
//       </body>
//     </html>
//   );
// }

// import "./globals.css";
// import Layout from '../components/Layout/Layout';
// import { AuthProvider } from '../contexts/AuthContext';
// import Providers from './providers';

// export const metadata = {
//   title: 'Your App',
//   description: 'Your app description',
// };

// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <html lang="en">
//       <body>
//         <Providers>
//           <AuthProvider>
//             <Layout>
//               {children}
//             </Layout>
//           </AuthProvider>
//         </Providers>
//       </body>
//     </html>
//   );
// }

// 'use client';

// import "./globals.css";
// import Providers from './providers';
// import { AuthProvider } from '../contexts/AuthContext';

// export const metadata = {
//   title: 'PropertyHub',
//   description: 'Find your perfect property',
// };

// // Make sure Layout is a client component if it uses hooks
// import LayoutClient from "@/components/Layout/LayoutClient";
// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <html lang="en">
//       <body>
//         <Providers>
//           <AuthProvider>
//             <LayoutClient>
//               {children}
//             </LayoutClient>
//           </AuthProvider>
//         </Providers>
//       </body>
//     </html>
//   );
// }

// app/layout.tsx

// import ClientLayout from './ClientLayout';

// export const metadata = {
//   title: 'PropertyHub',
//   description: 'Find your perfect property',
// };

// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <html lang="en">
//       <body>
//         <ClientLayout>{children}</ClientLayout>
//       </body>
//     </html>
//   );
// }

// src/app/layout.tsx
// import ClientLayout from './ClientLayout';

// export const metadata = {
//   title: 'PropertyHub',
//   description: 'Find your perfect property',
// };

// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <html lang="en">
//       <body>
//         <ClientLayout>{children}</ClientLayout>
//       </body>
//     </html>
//   );
// }

 import "./globals.css";

import ClientLayout from './ClientLayout';

export const metadata = {
  title: 'Ppoint',
  description: 'Pin Points, perfect property',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <ClientLayout>{children}</ClientLayout>
      </body>
    </html>
  );
}